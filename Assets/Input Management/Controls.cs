//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Input Management/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""4987cee6-e058-4b9c-9992-b74aa97fe90c"",
            ""actions"": [
                {
                    ""name"": ""Dice Roll"",
                    ""type"": ""Button"",
                    ""id"": ""9e09bccc-59d4-4fac-9e2a-ca26d90eabdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c438655a-0ddb-46ac-9fce-a149701ac353"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dice Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91e74819-e0ea-49a3-b85a-847dd91ed0f1"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dice Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a75cccc3-26cd-48ba-953a-d5926c1d52e3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dice Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Off"",
            ""id"": ""28de0bad-381b-4411-8d48-689ea4f23849"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""0b754ce7-50d6-4855-9cb6-10157e91ca68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""229eeb02-049a-4aba-8808-6af89ba52bb3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_DiceRoll = m_Gameplay.FindAction("Dice Roll", throwIfNotFound: true);
        // Off
        m_Off = asset.FindActionMap("Off", throwIfNotFound: true);
        m_Off_Newaction = m_Off.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_DiceRoll;
    public struct GameplayActions
    {
        private @Controls m_Wrapper;
        public GameplayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DiceRoll => m_Wrapper.m_Gameplay_DiceRoll;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @DiceRoll.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDiceRoll;
                @DiceRoll.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDiceRoll;
                @DiceRoll.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDiceRoll;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DiceRoll.started += instance.OnDiceRoll;
                @DiceRoll.performed += instance.OnDiceRoll;
                @DiceRoll.canceled += instance.OnDiceRoll;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Off
    private readonly InputActionMap m_Off;
    private IOffActions m_OffActionsCallbackInterface;
    private readonly InputAction m_Off_Newaction;
    public struct OffActions
    {
        private @Controls m_Wrapper;
        public OffActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Off_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Off; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OffActions set) { return set.Get(); }
        public void SetCallbacks(IOffActions instance)
        {
            if (m_Wrapper.m_OffActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_OffActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_OffActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_OffActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_OffActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public OffActions @Off => new OffActions(this);
    public interface IGameplayActions
    {
        void OnDiceRoll(InputAction.CallbackContext context);
    }
    public interface IOffActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
